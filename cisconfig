#!/bin/bash
# cisconfig — Cisco console connection helper
# MIT License (c) ibm-7094a

CONFIG_FILE="$HOME/.cisconfig.conf"

echo "🧩 Welcome to cisconfig!"
echo "A simple helper for connecting to Cisco switches and routers."
echo

# Detect OS
OS="$(uname -s)"
case "$OS" in
    Linux*)  PLATFORM="Linux" ;;
    Darwin*) PLATFORM="macOS" ;;
    *) echo "❌ Unsupported OS: $OS"; exit 1 ;;
esac

# If config exists, offer to use it
if [ -f "$CONFIG_FILE" ]; then
    echo "Found existing configuration at $CONFIG_FILE."
    read -p "Use this configuration? (y/n): " use_config
    if [[ "$use_config" =~ ^[Yy]$ ]]; then
        source "$CONFIG_FILE"
        echo "✅ Using saved configuration:"
        echo "   Device: $DEVICE"
        echo "   Baud: $BAUD"
        echo "   Frame: $FRAME"
        read -p "Continue with these settings? (y/n): " cont
        if [[ "$cont" =~ ^[Nn]$ ]]; then
            echo "Starting fresh configuration..."
        else
            echo
            echo "Starting connection..."
            sudo cu -l "$DEVICE" -s "$BAUD" --parity="${FRAME: -1}" || true
            exit 0
        fi
    fi
fi

# Device detection
echo "🔍 Searching for serial devices..."
if [ "$PLATFORM" = "macOS" ]; then
    DEVICES=($(ls /dev/cu.* 2>/dev/null))
else
    DEVICES=($(ls /dev/ttyUSB* /dev/ttyACM* 2>/dev/null))
fi

if [ ${#DEVICES[@]} -eq 0 ]; then
    echo "⚠️ No devices found."
    read -p "Enter device path manually (e.g., /dev/ttyUSB0): " DEVICE
else
    echo "Available devices:"
    i=1
    for d in "${DEVICES[@]}"; do
        echo "  [$i] $d"
        ((i++))
    done
    read -p "Select device (1-${#DEVICES[@]} or enter path): " choice
    if [[ "$choice" =~ ^[0-9]+$ ]]; then
        DEVICE="${DEVICES[$((choice-1))]}"
    else
        DEVICE="$choice"
    fi
fi

# Kill conflicting processes
echo "🔪 Checking for processes using $DEVICE..."
if command -v lsof >/dev/null 2>&1; then
    PIDS=$(sudo lsof -t "$DEVICE" 2>/dev/null)
elif command -v fuser >/dev/null 2>&1; then
    PIDS=$(sudo fuser "$DEVICE" 2>/dev/null)
fi
if [ -n "$PIDS" ]; then
    echo "Killing processes: $PIDS"
    sudo kill -9 $PIDS 2>/dev/null
else
    echo "No conflicts detected."
fi

# Baud rate selection
echo
echo "💨 Select baud rate:"
BAUD_OPTIONS=(9600 19200 38400 57600 115200 Custom)
for i in "${!BAUD_OPTIONS[@]}"; do
    echo "  [$((i+1))] ${BAUD_OPTIONS[$i]}"
done
read -p "Choice: " baud_choice
if [[ "$baud_choice" =~ ^[1-5]$ ]]; then
    BAUD="${BAUD_OPTIONS[$((baud_choice-1))]}"
else
    read -p "Enter custom baud rate: " BAUD
fi

# Frame format
read -p "Frame format (default 8N1): " FRAME
FRAME=${FRAME:-8N1}

# Confirm connection
echo
echo "You are about to connect with:"
echo "  Device: $DEVICE"
echo "  Baud: $BAUD"
echo "  Frame: $FRAME"
read -p "Proceed? (y/n): " confirm
[[ ! "$confirm" =~ ^[Yy]$ ]] && echo "Aborted." && exit 0

# Ask to save configuration (always)
read -p "Would you like to save this configuration for next time? (y/n): " save_choice
if [[ "$save_choice" =~ ^[Yy]$ ]]; then
    if [ -f "$CONFIG_FILE" ]; then
        read -p "⚠️ Configuration already exists and will be overwritten. Overwrite? (y/n): " overwrite
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            echo "Skipping save."
        else
            echo "DEVICE=\"$DEVICE\"" > "$CONFIG_FILE"
            echo "BAUD=\"$BAUD\"" >> "$CONFIG_FILE"
            echo "FRAME=\"$FRAME\"" >> "$CONFIG_FILE"
            echo "💾 Saved configuration to $CONFIG_FILE"
        fi
    else
        echo "DEVICE=\"$DEVICE\"" > "$CONFIG_FILE"
        echo "BAUD=\"$BAUD\"" >> "$CONFIG_FILE"
        echo "FRAME=\"$FRAME\"" >> "$CONFIG_FILE"
        echo "💾 Saved configuration to $CONFIG_FILE"
    fi
fi

echo
echo "🔌 Connecting..."
echo "To disconnect, type:  ~.  (tilde + period)"
sudo cu -l "$DEVICE" -s "$BAUD" --parity="${FRAME: -1}" || true
